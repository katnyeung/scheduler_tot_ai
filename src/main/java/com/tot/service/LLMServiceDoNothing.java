package com.tot.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Service;

/**
 * Do-nothing implementation of LLMService for testing or when LLM features are disabled
 * This service returns mock responses without calling external APIs
 */
@Service
@ConditionalOnProperty(name = "tot.llm.service", havingValue = "donothing", matchIfMissing = true)
public class LLMServiceDoNothing implements LLMService {
    private static final Logger logger = LoggerFactory.getLogger(LLMServiceDoNothing.class);

    public LLMServiceDoNothing() {
        logger.info("LLMServiceDoNothing initialized - LLM features disabled");
    }

    @Override
    public String generateTreeOfThought(String prompt) {
        logger.info("LLMServiceDoNothing: generateTreeOfThought called with prompt: {}", prompt);
        
        // Return a simple mock tree structure
        return """
        [
          {
            "nodeId": "root",
            "treeId": "mock_tree",
            "content": "Mock decision tree",
            "criteria": "This is a mock tree generated by LLMServiceDoNothing",
            "children": {
              "yes": "node_001",
              "no": "node_002"
            }
          },
          {
            "nodeId": "node_001",
            "treeId": "mock_tree",
            "content": "Positive outcome",
            "criteria": "PROCEED - Mock positive decision",
            "children": {}
          },
          {
            "nodeId": "node_002",
            "treeId": "mock_tree",
            "content": "Negative outcome", 
            "criteria": "STOP - Mock negative decision",
            "children": {}
          }
        ]
        """;
    }

    @Override
    public String refineTreeOfThought(String treeJson, String newPrompt) {
        logger.info("LLMServiceDoNothing: refineTreeOfThought called with prompt: {}", newPrompt);
        
        // Return the original tree unchanged
        return treeJson;
    }

    @Override
    public ValidationResult validateTreeWithHistoricalComparison(String treeJson, int comparisonDays) {
        logger.info("LLMServiceDoNothing: validateTreeWithHistoricalComparison called with {}-day comparison", comparisonDays);
        
        // Return a mock validation result
        String criteria = String.format("Mock validation with %d-day comparison. No external API calls made.", comparisonDays);
        return new ValidationResult("true", criteria);
    }

    @Override
    public String validateTree(String treeJson) {
        logger.info("LLMServiceDoNothing: validateTree called");
        return "true";
    }
}